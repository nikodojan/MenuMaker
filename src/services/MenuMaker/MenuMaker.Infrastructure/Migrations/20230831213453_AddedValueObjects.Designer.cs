// <auto-generated />
using System;
using MenuMaker.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MenuMaker.Infrastructure.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20230831213453_AddedValueObjects")]
    partial class AddedValueObjects
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Grocery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StandardUnit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Groceries", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.GroceryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("GroceryCategories", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("Amount")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GroceryId")
                        .HasColumnType("int");

                    b.Property<string>("PartOfDish")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GroceryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.NutritionFacts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("GroceryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroceryId")
                        .IsUnique();

                    b.ToTable("NutritionFacts");
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<int?>("Portions")
                        .HasColumnType("int");

                    b.Property<int?>("TimeInMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Grocery", b =>
                {
                    b.HasOne("MenuMaker.Domain.Aggregates.RecipeAggregate.GroceryCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Ingredient", b =>
                {
                    b.HasOne("MenuMaker.Domain.Aggregates.RecipeAggregate.Grocery", "Grocery")
                        .WithMany()
                        .HasForeignKey("GroceryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuMaker.Domain.Aggregates.RecipeAggregate.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grocery");
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.NutritionFacts", b =>
                {
                    b.HasOne("MenuMaker.Domain.Aggregates.RecipeAggregate.Grocery", null)
                        .WithOne("NutritionFacts")
                        .HasForeignKey("MenuMaker.Domain.Aggregates.RecipeAggregate.NutritionFacts", "GroceryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "Calories", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "Carbonhydrates", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "Fat", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "Protein", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "ServingSize", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.OwnsOne("MenuMaker.Domain.Aggregates.RecipeAggregate.ValueObjects.UnitValue", "Sugar", b1 =>
                        {
                            b1.Property<int>("NutritionFactsId")
                                .HasColumnType("int");

                            b1.Property<double>("Amount")
                                .HasColumnType("double");

                            b1.Property<string>("Unit")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NutritionFactsId");

                            b1.ToTable("NutritionFacts");

                            b1.WithOwner()
                                .HasForeignKey("NutritionFactsId");
                        });

                    b.Navigation("Calories")
                        .IsRequired();

                    b.Navigation("Carbonhydrates")
                        .IsRequired();

                    b.Navigation("Fat")
                        .IsRequired();

                    b.Navigation("Protein")
                        .IsRequired();

                    b.Navigation("ServingSize")
                        .IsRequired();

                    b.Navigation("Sugar")
                        .IsRequired();
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Grocery", b =>
                {
                    b.Navigation("NutritionFacts");
                });

            modelBuilder.Entity("MenuMaker.Domain.Aggregates.RecipeAggregate.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
