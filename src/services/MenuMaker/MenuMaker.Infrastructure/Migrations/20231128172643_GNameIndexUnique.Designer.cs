// <auto-generated />
using System;
using MenuMaker.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MenuMaker.Infrastructure.Migrations
{
    [DbContext(typeof(RecipesContext))]
    [Migration("20231128172643_GNameIndexUnique")]
    partial class GNameIndexUnique
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Grocery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("NamePlural")
                        .HasColumnType("text");

                    b.Property<string>("NameSelectable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameSingular")
                        .HasColumnType("text");

                    b.Property<string>("StandardUnit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("g");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("NameSelectable")
                        .IsUnique();

                    b.ToTable("Groceries", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.GroceryCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GroceryCategories", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("GroceryId")
                        .HasColumnType("integer");

                    b.Property<string>("PartOfDish")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GroceryId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int?>("Portions")
                        .HasColumnType("integer");

                    b.Property<int?>("TimeInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Recipes", (string)null);
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Grocery", b =>
                {
                    b.HasOne("MenuMaker.Infrastructure.Entities.Recipes.GroceryCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MenuMaker.Infrastructure.Entities.Recipes.NutritionFacts", "NutritionFacts", b1 =>
                        {
                            b1.Property<int>("GroceryId")
                                .HasColumnType("integer");

                            b1.Property<double>("Calories")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_Calories");

                            b1.Property<double>("GrammsCarbonhydrates")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_GrammsCarbonhydrates");

                            b1.Property<double>("GrammsFat")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_GrammsFat");

                            b1.Property<double>("GrammsFiber")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_GrammsFiber");

                            b1.Property<double>("GrammsProtein")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_GrammsProtein");

                            b1.Property<double>("GrammsSugar")
                                .HasColumnType("double precision")
                                .HasColumnName("NF_GrammsSugar");

                            b1.HasKey("GroceryId");

                            b1.ToTable("Groceries");

                            b1.WithOwner()
                                .HasForeignKey("GroceryId");

                            b1.OwnsOne("MenuMaker.Domain.Models.ValueObjects.UnitValue", "ServingSize", b2 =>
                                {
                                    b2.Property<int>("NutritionFactsGroceryId")
                                        .HasColumnType("integer");

                                    b2.Property<double>("Amount")
                                        .HasColumnType("double precision")
                                        .HasColumnName("NF_Serving_Amount");

                                    b2.Property<string>("Unit")
                                        .IsRequired()
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("text")
                                        .HasDefaultValue("g")
                                        .HasColumnName("NF_Serving_Unit");

                                    b2.HasKey("NutritionFactsGroceryId");

                                    b2.ToTable("Groceries");

                                    b2.WithOwner()
                                        .HasForeignKey("NutritionFactsGroceryId");
                                });

                            b1.Navigation("ServingSize")
                                .IsRequired();
                        });

                    b.Navigation("Category");

                    b.Navigation("NutritionFacts")
                        .IsRequired();
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Ingredient", b =>
                {
                    b.HasOne("MenuMaker.Infrastructure.Entities.Recipes.Grocery", "Grocery")
                        .WithMany()
                        .HasForeignKey("GroceryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MenuMaker.Infrastructure.Entities.Recipes.Recipe", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grocery");
                });

            modelBuilder.Entity("MenuMaker.Infrastructure.Entities.Recipes.Recipe", b =>
                {
                    b.Navigation("Ingredients");
                });
#pragma warning restore 612, 618
        }
    }
}
